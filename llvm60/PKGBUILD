# Contributor: Michael Lass <bevan@bi-co.net>
# Maintainer: Yonggang Li <gnaggnoyil@gmail.com>

# This package does not include OCaml and go bindings.
# Several possible ways I came up with by far to build OCaml and Go bindings:
#     * Bring separate OCaml and Go package whose versions are different with
#       official packages, and let llvm stick to these two. To do so a patch to
#       allow llvm to choose which ocaml and which go is needed. Also which
#       package of OCaml and Go to stick is probably difficult to determine.
#     * Always stick with official OCaml and Go packages. To do so a patch to
#       allow llvm install their bindings in separate subdirectory is needed,
#       and names for thses separate directories is probably difficult to
#       determine.
#       Also that means this package needs to be rebuilt each time OCaml and Go
#       got updated.
# Before I could came up with a perfect solution, I will build this package
# without OCaml and go bindings

# Note: Different from what the official llvm package used to be, this package
# didn't apply the `set(LLVM_DYLIB_COMPONENTS @LLVM_DYLIB_COMPONENTS@)` patch
# in its LLVMConfig.cmake.in, leaving the llvm cmake config files as is.
# Therefore, issues described in D44391 will happen if you're going to link
# with this llvm60 package.
# By far, I would recommend users of this package to add workarounds in their
# codes/configuarions themselves. One example of workarounding this issue can
# be found in PKGBUILD of clang60 package, where `LLVM_DYLIB_COMPNENTS` is set
# to `all` during `build()`, so that errors like "Options registered more than
# once" can be avoided.

pkgname=llvm60
pkgdesc="LLVM compiler toolchain, version 6.0 (installed under /opt/llvm60)"
pkgver=6.0.1
pkgrel=1
arch=('x86_64')
url="https://llvm.org/"
license=('custom:University of Illinois/NCSA Open Source License')
depends=('libedit' 'libxml2' 'python2')
makedepends=('cmake' 'ninja' 'libffi' 'libedit' 'ncurses' 'libxml2' 'python-sphinx')
options=('staticlibs')
source=("https://releases.llvm.org/$pkgver/llvm-$pkgver.src.tar.xz"
        "0001-disable-ocaml-and-go-bindings.patch")
sha256sums=('b6d6c324f9c71494c0ccaf3dac1f16236d970002b42bb24a6c9e1634f7d0f4e2'
            'c6e4adeb180addee5209b82dee65011946f3d674a50fd5f1e26eba15ddce43e2')

prepare() {
    cd "${srcdir}/llvm-$pkgver.src"
    patch -i "${srcdir}/0001-disable-ocaml-and-go-bindings.patch" -p2
}

build() {
    mkdir -p "$srcdir/llvm-$pkgver.src/build"
    cd "$srcdir/llvm-$pkgver.src/build"
    cmake .. -G Ninja \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/opt/llvm60 \
        -DLLVM_HOST_TRIPLE=$CHOST \
        -DLLVM_BUILD_LLVM_DYLIB=ON \
        -DLLVM_LINK_LLVM_DYLIB=ON \
        -DLLVM_INSTALL_UTILS=ON \
        -DLLVM_ENABLE_RTTI=ON \
        -DLLVM_ENABLE_FFI=ON \
        -DLLVM_BUILD_TESTS=OFF \
        -DLLVM_BUILD_DOCS=ON \
        -DLLVM_ENABLE_SPHINX=ON \
        -DLLVM_ENABLE_DOXYGEN=OFF \
        -DSPHINX_WARNINGS_AS_ERRORS=OFF \
        -DFFI_INCLUDE_DIR=$(pkg-config --variable=includedir libffi) \
        -DLLVM_BINUTILS_INCDIR=/usr/include
    ninja
}

package() {
    cd "$srcdir/llvm-$pkgver.src/build"
    DESTDIR="$pkgdir" ninja install

    install -Dm644 ../LICENSE.TXT "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}
