# Maintainer: Yonggang Li <gnaggnoyil@gmail.com>
# Contributor: Dmitry Popov <ixaphire@gmail.com>

# Built with:
# ```
# extra-x86_64-build -- \
#   -I ~/workspace/AGR/thrust-rapidsai/thrust-rapidsai-1.15.0-1-x86_64.pkg.tar.zst \
#   -I ~/workspace/AGR/rapids-memory-manager/rapids-memory-manager-22.08.00-1-x86_64.pkg.tar.zst \
#   -I ~/jdk-openjdk-18.0.2.1.u0-1-x86_64.pkg.tar.zst \
#   -I ~/jdk11-openjdk-11.0.16.1.u1-2-x86_64.pkg.tar.zst \
#   -I ~/.cache/yay/cpprestsdk/cpprestsdk-2.10.18-2-x86_64.pkg.tar.zst \
#   -I ~/workspace/AGR/azure-storage-cpp/azure-storage-cpp-7.5.0-3-x86_64.pkg.tar.zst \
#   -I ~/workspace/AGR/hadoop-xgboost/hadoop-xgboost-3.3.4-1-x86_64.pkg.tar.zst
# ```

pkgbase=xgboost
# `libxgboost.so` itself is just a normal C++ library and the python wrapper
# directly loads that library and calls its C++ code inside it.
# The setup.py user options `--use-cuda` and `--use-nccl` only affects how
# setuptools builds its bundled libxgboost.so library. Thus, if setup.py uses a
# previously built libxgboost.so file which lies under `$srcdir/lib` directory,
# or if the `--use-system-libxgboost` option is specified (which makes setup.py
# assume the existance of a system libxgboost.so, ignore any steps to bundle
# that library, and just install the python wrapper), the above two options
# won't have any effect.
# Therefore, if we pass `--use-system-libxgboost` option, the python-xgboost
# package will then just be a python wrapper for the `xgboost`/`xgboost-cuda`
# library, and we don't need to spilt the wrapper package for `xgboost` and
# `xgboost-cuda`
# Note however, 0001-python_no_libs.patch or something similar is needed to
# completely silence the assertion check in order to really ensure that
# setup.py simply ignores the library file.
pkgname=(
    xgboost
    xgboost-cuda
    python-xgboost
)
pkgver=2.0.3
pkgrel=1
arch=('x86_64')
url='https://github.com/dmlc/xgboost'
license=('Apache-2.0')
_dependsbase=(
    # Required for USE_HDFS
    # When running extra-x86_64-build or makechrootpkg, a specific package that
    # provides java-environment should be added through -I flags too. Otherwise
    # pacman will keep asking to choose a provider and receiving "y" in return
    # E.g. extra-x86_64-build -- -I ./jdk-openjdk-17.0.3.u3-1-x86_64.pkg.tar.zst -I ~/hadoop-3.3.1-1-x86_64.pkg.tar.gz
    # Related commit: devtools#b7893a2
    'hadoop-xgboost'
    # Hadoop itself does not tie to specified jdk-openjdk version and the
    # libjvm.so library that dmlc-core links is just used to satisfy the need
    # of libhdfs.so. However, as a package that explicitly depends on jvm
    # shared libraries, I think we need to explicitly tie to the latest
    # `java-environment`, a.k.a. `jdk-openjdk`` and its indirect dependency, 
    # `jre-openjdk-headless`
    'jdk-openjdk'
    # Required for USE_S3
    'curl'
    # openssl is already a dependency of cpprestsdk, which is a dependency of
    # azure-storage-cpp
    #'openssl' # May build a new package with openssl-1.0
    'azure-storage-cpp'
    # The python package seems to be using pyarrow, yet no idea why devs aren't
    # listing pyarrow as a dep.
    'arrow'
)
_depends_xgboost_cuda=(
    'cuda'
    'nccl'
    # CMake will link libfmt.so for some object files, but if `--as-needed` is
    # in link flags this library linking will be removed during link time.
    #'fmt'
    'grpc' # Required for `PLUGIN_FEDERATED`
    # protobuf is already a dependency of grpc
    # NVFlare is not required when using xgboost built with PLUGIN_FEDERATED,
    # but the xgboost doc describes how to cooperate with NVFlare if built with
    # PLUGIN_FEDERATED. There's not NVFlare package even in AUR, so should we
    # create a package for it?
)
_makedepends_xgboost_cuda=(
    # Unless we are using thrust-rapidsai in a way that actually links libaray files
    # (which is hardly possible AFAIK), we don't need to put any possible
    # package as dependency of xgboost-cuda as the use of thrust1.15 in rmm
    # doesn't seems to bring any library file dependencies.
    # As of v23.06 the only library file dependency rmm needs are cudart, libdl
    # and spdlog. Cudart and libdl are already direct or indirect dependencies
    # of xgboost-cuda. Spdlog brings libfmt.so as a dependency
    'rapids-memory-manager'
)
_depends_python_xgboost=(
    'python>=3.8'
    'python-numpy'
    'python-scipy'
)
_makedepends_python_xgboost=(
    'python-build'
    'python-installer'
    'python-wheel'
    'python-hatchling>=1.12.1'
)
# TODO: check if some optdepends are needed as makedepends too
# Some of them are already needed for testing python package.
_optdepends_python_xgboost=(
    'python-pandas: for pandas and dask support'
    'python-scikit-learn: for scikit-learn and pyspark support'
    'python-dask: for dask support'
    'python-distributed: for dask support'
    'python-datatable: for datatable support'
    'python-graphviz: for plotting support'
    'python-matplotlib: for plotting support'
    # Note: as of date 2023-06-23 `aur/python-pyspark` is missing its required
    # dependency `python-py4j`
    'python-pyspark: for pyspark support'
    'python-cloudpickle: for pyspark support'
)
makedepends=(
    'cmake'
    
    "${_dependsbase[@]}"
    "${_depends_xgboost_cuda[@]}"
    "${_makedepends_xgboost_cuda[@]}"
    
    "${_depends_python_xgboost[@]}"
    "${_makedepends_python_xgboost[@]}"
)
# Disable debug option for now for the same reason. Also it seems there's only
# `xgboost-debug` package but no `xgboost-cuda-debug` package. Does it mean
# something?
options=(!debug)
_dmlc_core_tag='ea21135fbb141ae103fb5fc960289b5601b468f2'
_gputreeshap_tag='787259b412c18ab8d5f24bf2b8bd6a59ff8208f3'
source=(
    #"git+https://github.com/dmlc/$pkgbase.git#tag=v$pkgver"
    #'git+https://github.com/dmlc/dmlc-core'
    #'git+https://github.com/NVlabs/cub'
    #'git+https://github.com/rapidsai/gputreeshap.git'
    "${pkgbase}-${pkgver}.tar.gz::https://github.com/dmlc/xgboost/archive/v${pkgver}.tar.gz"
    "dmlc-core-${_dmlc_core_tag}.tar.gz::https://github.com/dmlc/dmlc-core/archive/${_dmlc_core_tag}.tar.gz"
    "gputreeshap-${_gputreeshap_tag}.tar.gz::https://github.com/rapidsai/gputreeshap/archive/${_gputreeshap_tag}.tar.gz"
    # Generated with `git diff --ignore-submodules`
    '0001-python_assume_system_libxgboost.patch'
    'dmlc_core-0001-disable_hdfs_static.patch'
    'dmlc_core-0002-fix_azure_storage_build.patch'
)
sha256sums=('94e5deb27133459ec4172f3fed83971383366ad2a7d646b6f0b51f63484c5138'
            '09f2e87dc627c423ad2ed0ac1735e7c73d7d515de78033096e1a88491d5549f9'
            'cc0f7c1a3fd5fe1f9dcedcf959c923af4275ab6a8b1d07ea405af014ca6b371c'
            'ca0d22bc37d4ea37090f6380f15211d50ce7083ed7db12b86e6d5a92388aef40'
            'b49a3dcf8f592a2115e9e0face713b2f0358b6b5e67365788fe0c9abd2c07866'
            '3071ec8ba86670d19457cac2766b8a69e59fea8069e1f3a562cd8837f4be9098')

prepare() {
    #cd "${srcdir}/${pkgbase}"
    #git submodule init
    #git config submodule.dmlc-core.url "${srcdir}/dmlc-core"
    #git config submodule.cub.url "${srcdir}/cub"
    #git config submodule.gputreeshap.url "${srcdir}/gputreeshap"
    #git submodule update

    cd "${srcdir}/${pkgbase}-${pkgver}"
    rm -d dmlc-core
    cp -r "${srcdir}/dmlc-core-${_dmlc_core_tag}" "${srcdir}/${pkgbase}-${pkgver}/dmlc-core"
    rm -d gputreeshap
    cp -r "${srcdir}/gputreeshap-${_gputreeshap_tag}" "${srcdir}/${pkgbase}-${pkgver}/gputreeshap"

    cd "${srcdir}/${pkgbase}-${pkgver}"
    patch -i "${srcdir}/0001-python_assume_system_libxgboost.patch" -p1
    cd "${srcdir}/${pkgbase}-${pkgver}/dmlc-core"
    patch -i "${srcdir}/dmlc_core-0001-disable_hdfs_static.patch" -p1
    patch -i "${srcdir}/dmlc_core-0002-fix_azure_storage_build.patch" -p1

    # The `RUNTIME_OUTPUT_DIRECTORY` and `LIBRARY_OUTPUT_DIRECTORY` is set
    # in the ${srcdir}. So we have to use two src directories to build xgboost
    # and xgboost-cuda
    mkdir -p "${srcdir}/${pkgbase}-${pkgver}/build"
    cp -r "${srcdir}/${pkgbase}-${pkgver}" "${srcdir}/${pkgbase}-${pkgver}-cuda"
}

build() {
    _common_env=(
        HADOOP_HDFS_HOME=/usr/lib/hadoop-3.3.6
        HADOOP_WORKERS=/etc/hadoop/workers
        JAVA_HOME=/usr/lib/jvm/default
    )

    _common_args=(
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_INSTALL_PREFIX=/usr
        -DBUILD_SHARED_LIBS=ON
        # Required to add libhdfs.so and libjvm.so to rpath since these two
        # libraries does not stay on normal ld library path.
        -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=ON

        # See `xgboost/pull/9525`, this option will be removed in the later
        # release of xgboost
        #-DRABIT_BUILD_MPI=ON

        #-DUSE_OPENMP=ON # Default is ON
        -DUSE_HDFS=ON # Default is OFF
        # Required since aur/hadoop does not guarantee that a libhdfs.a exists.
        -DDMLC_HDFS_SHARED=ON
        -DUSE_S3=ON
        -DUSE_AZURE=ON # Default is OFF

        -DPLUGIN_DENSE_PARSER=ON

        # Options for only dmlc.
        -DUSE_PARQUET=ON
    )

    # TODO: find out the difference of setting `-DBUILD_C_DOCS=ON`` in cmake and
    # running `make` in ./doc directory.
    #_non_cuda_env=(
    #    # XGBoost doesn't have any public cuda api so it's ok to build doc only
    #    # with non cuda build
    #    -DBUILD_C_DOCS=ON
    #)
    # TODO: check if we need to build the doc package as well since v1.7.0
    # greatly improves its doc, especially the C one.

    _cuda_env=(
        CC=/opt/cuda/bin/gcc
        CXX=/opt/cuda/bin/g++
    )

    # Do we need to build the package with shared libnccl.so instead of
    # static libnccl_static.a ?
    # MXNet uses shared nccl on UNIX if `CMAKE_BUILD_TYPE` is "Distribution".
    # Not sure how do we set xgboost for that
    _cuda_args=(
        -DUSE_CUDA=ON
        #-DUSE_PER_THREAD_DEFAULT_STREAM=ON # Default is ON
        -DUSE_NCCL=ON
        -DBUILD_WITH_SHARED_NCCL=ON
        -DPLUGIN_RMM=ON # Default is OFF
        -DPLUGIN_FEDERATED=ON # Default is OFF
        -DThrust_ROOT=/opt/thrust-rapidsai
        # As of 2023-06-23 the latest protobuf build in Archlinux specifies
        # `CMAKE_BUILD_TYPE` as `NONE` while the upstream protobuf cmake config
        # reads protoc executable location from `IMPORTED_LOCATION_NOCONFIG`.
        # What a mess..
        # It seems upstream protobuf will not overwrite cflags anc cxxflags
        # when omitting `CMAKE_BUILD_TYPE`, and the generated cmake config file
        # will be named with `-noconfig.cmake` suffix, since that's what CMake
        # will choose for the name of the config when build type is omitted.
        # Anyway...
        # As of 2024-01-31 the latest protobuf build in Archlinux seems to add a
        # patch to avoid this mismatch in CMake config file.
        #-DProtobuf_PROTOC_EXECUTABLE=/usr/bin/protoc
    )

    # For aur/hadoop, adding `--as-needed` in LDFLAGS will cause libxgboost.so
    # unable to find libjvm.so that's been linked to libdmlc.so when linking
    # libxgboost.so itself. Not sure the root cause of it.
    #LDFLAGS=${LDFLAGS/,--as-needed}
    #LDFLAGS=${LDFLAGS/ --as-needed}
    #if [ "x$LDFLAGS" = "x-Wl" ]; then
    #    LDFLAGS=''
    #fi

    echo "Building ${pkgbase}"
    cd "${srcdir}/${pkgbase}-${pkgver}/build"
    env ${_common_env[@]} cmake ${_common_args[@]} ..
    # MAKEFLAGS will automatically be read by GNU make
    cmake --build . --config Release

    echo "Building ${pkgbase}-cuda"
    cd "${srcdir}/${pkgbase}-${pkgver}-cuda/build"
    env ${_common_env[@]} ${_cuda_env[@]} cmake ${_common_args[@]} ${_cuda_args[@]} ..
    # TODO: find out what was happening when nvcc emits "incompatible
    # redefinition for option 'compiler-bindir', the last value of this option
    # was used" warning.
    cmake --build . --config Release

    echo "Building python-${pkgbase}"
    cd "${srcdir}/${pkgbase}-${pkgver}/python-package"
    python -m build --wheel --no-isolation -Cuse_system_libxgboost=True
}

package_xgboost() {
    _pkgname=${pkgbase}
    pkgdesc='An optimized distributed gradient boosting library designed to be highly efficient, flexible and portable'
    provides=('xgboost' 'dmlc-core')
    conflicts=('xgboost-cuda' 'xgboost-git')
    depends+=("${_dependsbase[@]}")

    cd "${srcdir}/${pkgbase}-${pkgver}/build"
    DESTDIR=${pkgdir} make install
    install -Dm644 "${srcdir}/${pkgbase}-${pkgver}/LICENSE" "${pkgdir}/usr/share/licenses/${_pkgname}/LICENSE"
}

package_xgboost-cuda() {
    _pkgname=${pkgbase}-cuda
    pkgdesc='An optimized distributed gradient boosting library designed to be highly efficient, flexible and portable (with CUDA)'
    provides=('xgboost' 'dmlc-core')
    conflicts=('xgboost' 'xgboost-git')
    depends+=("${_dependsbase[@]}" "${_depends_xgboost_cuda[@]}")

    cd "${srcdir}/${pkgbase}-${pkgver}-cuda/build"
    DESTDIR=${pkgdir} make install
    install -Dm644 "${srcdir}/${pkgbase}-${pkgver}-cuda/LICENSE" "${pkgdir}/usr/share/licenses/${_pkgname}/LICENSE"
}

package_python-xgboost() {
    _pkgname=python-${pkgbase}
    pkgdesc='XGBoost Python 3 wrapper'
    depends+=('xgboost' "${_depends_python_xgboost[@]}")
    # Double quotes prevent field expansion on bash
    optdepends+=("${_optdepends_python_xgboost[@]}")
    conflicts=('python-xgboost-git')

    cd "${srcdir}/${pkgbase}-${pkgver}/python-package"
    #python setup.py install --root="${pkgdir}" --optimize=1 --use-system-libxgboost
    python -m installer dist/*.whl --destdir="${pkgdir}" --compile-bytecode=2
    #pip install -v . --config-settings use_system_libxgboost=True #--config-settings optimize=True
    install -Dm644 "${srcdir}/${pkgbase}-${pkgver}/LICENSE" "${pkgdir}/usr/share/licenses/${_pkgname}/LICENSE"
}
